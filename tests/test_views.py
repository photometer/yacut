import pytest

from yacut.models import URL_map

py_url = 'https://www.python.org'


def test_index_form_get(client):
    got = client.get('/')
    assert got.status_code == 200
    assert b'form' in got.data, (
        'Add form to context of `index` page'
    )


def test_index_form_post(client):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    })
    assert got.status_code == 200, (
        'When submitting the form, the main page should return status `200`'
    )
    unique_id = URL_map.query.filter_by(original=py_url, short='py').first()
    assert unique_id, (
        'After the form is submitted, a new record must be created in the database.'
    )
    assert '<a href="http://localhost/py"' in got.data.decode('utf-8'), (
        'After submitting the form, the generated link should appear on the main page.'
    )


def test_duplicated_url_in_form(client, short_python_url):
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': 'py',
    }, follow_redirects=True)
    assert 'Name py is already taken!' in got.data.decode('utf-8'), (
        'If the short link name received in the request is already taken, '
        '"Name <short_name> is taken!" should be displayed on the main page '
        'after submitting the form'
    )


def test_get_unique_short_id(client):
    got = client.post('/', data={
        'original_link': py_url,
    })
    assert got.status_code == 200, (
        'When submitting a form without a short link value set, the main '
        'page should return a status code of `200`'
    )
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert unique_id, (
        'When submitting a form without a short link value set, '
        'a new record should be created in the database.'
    )
    assert f'Your new link is ready: http://localhost:5000/{unique_id.short}', (
        'After submitting the form  without a short link value set, '
        'created link chould be displayed on the main page.'
    )


def test_redirect_url(client, short_python_url):
    got = client.get(f'/{short_python_url.short}')
    assert got.status_code == 302, (
        'When redirecting to a short address, make sure that the status code `302` is returned'
    )
    assert got.location == short_python_url.original, (
        'When redirecting to a short address, make sure that original link is correct'
    )


def test_len_short_id_form(client):
    long_string = 'CuriosityisnotasinHarryHoweverfromtimetotimeyoushouldexercisecaution'
    got = client.post('/', data={
        'original_link': py_url,
        'custom_id': long_string,
    })
    assert 'Your new link is ready' not in got.data.decode('utf-8'), (
        'If a short link name longer than 16 characters is sent through the '
        'form, an error message should be displayed on the page.'
    )


def test_len_short_id_autogenerated_view(client):
    client.post('/', data={
        'original_link': py_url,
    })
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert len(unique_id.short) == 6, (
        'If there no short link in the form,'
        'short link with 6 characters long should be generated.'
    )


@pytest.mark.parametrize('data', [
    ({'url': py_url, 'custom_id': '.,/!?'}),
    ({'url': py_url, 'custom_id': 'Hodor-Hodor'}),
    ({'url': py_url, 'custom_id': 'h@k$r'}),
    ({'url': py_url, 'custom_id': '$'}),
])
def test_invalid_short_url(data, client):
    client.post('/', data=data)
    unique_id = URL_map.query.filter_by(original=py_url).first()
    assert not unique_id, (
        'In short link shoud be allowed to use a strictly defined set of '
        'characters. Refer to the text of the assignment'
    )
